const allDsaProblems = [
    { no: 1, title: 'Find Maximum Subarray', difficulty: 'Medium' },
    { no: 2, title: 'Reverse a Linked List', difficulty: 'Easy' },
    { no: 3, title: 'Evaluate Reverse Polish Notation', difficulty: 'Medium' },
    { no: 4, title: 'Binary Tree Level Order Traversal', difficulty: 'Easy' },
    { no: 5, title: 'Shortest Path in Unweighted Graph', difficulty: 'Hard' },
    { no: 6, title: 'Two Sum', difficulty: 'Easy' },
    { no: 7, title: 'Container With Most Water', difficulty: 'Medium' },
    { no: 8, title: 'Longest Substring Without Repeating Characters', difficulty: 'Medium' },
    { no: 9, title: 'Valid Parentheses', difficulty: 'Easy' },
    { no: 10, title: 'Merge Two Sorted Lists', difficulty: 'Easy' },
    { no: 11, title: 'Best Time to Buy and Sell Stock', difficulty: 'Easy' },
    { no: 12, title: 'Valid Anagram', difficulty: 'Easy' },
    { no: 13, title: 'Group Anagrams', difficulty: 'Medium' },
    { no: 14, title: 'Maximum Product Subarray', difficulty: 'Medium' },
    { no: 15, title: 'Find Minimum in Rotated Sorted Array', difficulty: 'Medium' },
    { no: 16, title: 'Search in Rotated Sorted Array', difficulty: 'Medium' },
    { no: 17, title: '3Sum', difficulty: 'Medium' },
    { no: 18, title: 'Letter Combinations of a Phone Number', difficulty: 'Medium' },
    { no: 19, title: 'Combination Sum', difficulty: 'Medium' },
    { no: 20, title: 'Merge Intervals', difficulty: 'Medium' },
    { no: 21, title: 'Unique Paths', difficulty: 'Medium' },
    { no: 22, title: 'Climbing Stairs', difficulty: 'Easy' },
    { no: 23, title: 'Set Matrix Zeroes', difficulty: 'Medium' },
    { no: 24, title: 'Sort Colors', difficulty: 'Medium' },
    { no: 25, title: 'Word Search', difficulty: 'Medium' },
    { no: 26, title: 'Linked List Cycle', difficulty: 'Easy' },
    { no: 27, title: 'Minimum Window Substring', difficulty: 'Hard' },
    { no: 28, title: 'Binary Tree Inorder Traversal', difficulty: 'Easy' },
    { no: 29, title: 'Unique Binary Search Trees', difficulty: 'Medium' },
    { no: 30, title: 'Validate Binary Search Tree', difficulty: 'Medium' },
    { no: 31, title: 'Symmetric Tree', difficulty: 'Easy' },
    { no: 32, title: 'Binary Tree Level Order Traversal', difficulty: 'Medium' },
    { no: 33, title: 'Construct Binary Tree from Preorder and Inorder Traversal', difficulty: 'Medium' },
    { no: 34, title: 'Maximum Depth of Binary Tree', difficulty: 'Easy' },
    { no: 35, title: 'Path Sum', difficulty: 'Easy' },
    { no: 36, title: 'Course Schedule', difficulty: 'Medium' },
    { no: 37, title: 'Implement Trie (Prefix Tree)', difficulty: 'Medium' },
    { no: 38, title: 'Add and Search Word', difficulty: 'Medium' },
    { no: 39, title: 'Word Search II', difficulty: 'Hard' },
    { no: 40, title: 'Palindrome Linked List', difficulty: 'Easy' },
    { no: 41, title: 'LRU Cache', difficulty: 'Medium' },
    { no: 42, title: 'Merge k Sorted Lists', difficulty: 'Hard' },
    { no: 43, title: 'Find Median from Data Stream', difficulty: 'Hard' },
    { no: 44, title: 'Sliding Window Maximum', difficulty: 'Hard' },
    { no: 45, title: 'Longest Increasing Subsequence', difficulty: 'Medium' },
    { no: 46, title: 'Longest Common Subsequence', difficulty: 'Medium' },
    { no: 47, title: 'Word Break', difficulty: 'Medium' },
    { no: 48, title: 'Coin Change', difficulty: 'Medium' },
    { no: 49, title: 'House Robber', difficulty: 'Medium' },
    { no: 50, title: 'Maximum Subarray', difficulty: 'Easy' }
];

const arrayDsaProblems = [
    { no: 1, title: 'Two Sum', difficulty: 'Easy' },
    { no: 2, title: 'Maximum Subarray', difficulty: 'Medium' },
    { no: 3, title: 'Move Zeroes', difficulty: 'Easy' },
    { no: 4, title: 'Find Duplicate Number', difficulty: 'Medium' },
    { no: 5, title: 'Best Time to Buy and Sell Stock', difficulty: 'Easy' },
    { no: 6, title: 'Product of Array Except Self', difficulty: 'Medium' },
    { no: 7, title: 'Container With Most Water', difficulty: 'Medium' },
    { no: 8, title: 'Subarray Sum Equals K', difficulty: 'Medium' },
    { no: 9, title: '3Sum', difficulty: 'Medium' },
    { no: 10, title: 'Merge Intervals', difficulty: 'Medium' },
    { no: 11, title: 'Rotate Array', difficulty: 'Medium' },
    { no: 12, title: 'Set Matrix Zeroes', difficulty: 'Medium' },
    { no: 13, title: 'Spiral Matrix', difficulty: 'Medium' },
    { no: 14, title: 'Pascal\'s Triangle', difficulty: 'Easy' },
    { no: 15, title: 'Majority Element', difficulty: 'Easy' },
    { no: 16, title: 'Kadane\'s Algorithm', difficulty: 'Medium' },
    { no: 17, title: 'Minimum Size Subarray Sum', difficulty: 'Medium' },
    { no: 18, title: 'Find Missing Positive', difficulty: 'Hard' },
    { no: 19, title: 'Kth Largest Element in an Array', difficulty: 'Medium' },
    { no: 20, title: 'Maximum Product Subarray', difficulty: 'Medium' }
];

const linkedListDsaProblems = [
    { no: 1, title: 'Reverse a Linked List', difficulty: 'Easy' },
    { no: 2, title: 'Merge Two Sorted Lists', difficulty: 'Easy' },
    { no: 3, title: 'Remove Nth Node From End of List', difficulty: 'Medium' },
    { no: 4, title: 'Detect Cycle in Linked List', difficulty: 'Easy' },
    { no: 5, title: 'Find the Start of the Cycle in Linked List', difficulty: 'Medium' },
    { no: 6, title: 'Remove Duplicates from Sorted List', difficulty: 'Easy' },
    { no: 7, title: 'Intersection of Two Linked Lists', difficulty: 'Easy' },
    { no: 8, title: 'Reorder List', difficulty: 'Medium' },
    { no: 9, title: 'Palindrome Linked List', difficulty: 'Easy' },
    { no: 10, title: 'Flatten a Multilevel Doubly Linked List', difficulty: 'Medium' },
    { no: 11, title: 'Add Two Numbers', difficulty: 'Medium' },
    { no: 12, title: 'Copy List with Random Pointer', difficulty: 'Medium' },
    { no: 13, title: 'Swap Nodes in Pairs', difficulty: 'Medium' },
    { no: 14, title: 'Rotate List', difficulty: 'Medium' },
    { no: 15, title: 'Partition List', difficulty: 'Medium' },
    { no: 16, title: 'Sort List', difficulty: 'Medium' },
    { no: 17, title: 'Remove Linked List Elements', difficulty: 'Easy' },
    { no: 18, title: 'Odd Even Linked List', difficulty: 'Medium' },
    { no: 19, title: 'Delete Node in a Linked List', difficulty: 'Easy' },
    { no: 20, title: 'Merge K Sorted Lists', difficulty: 'Hard' }
];
  
const stackDsaProblems = [
    { no: 1, title: 'Implement Stack Using Queues', difficulty: 'Easy' },
    { no: 2, title: 'Implement Queue Using Stacks', difficulty: 'Easy' },
    { no: 3, title: 'Min Stack', difficulty: 'Easy' },
    { no: 4, title: 'Valid Parentheses', difficulty: 'Easy' },
    { no: 5, title: 'Evaluate Reverse Polish Notation', difficulty: 'Medium' },
    { no: 6, title: 'Largest Rectangle in Histogram', difficulty: 'Hard' },
    { no: 7, title: 'Trapping Rain Water', difficulty: 'Hard' },
    { no: 8, title: 'Basic Calculator', difficulty: 'Hard' },
    { no: 9, title: 'Remove K Digits', difficulty: 'Medium' },
    { no: 10, title: 'Decode String', difficulty: 'Medium' },
    { no: 11, title: 'Next Greater Element', difficulty: 'Medium' },
    { no: 12, title: 'Simplify Path', difficulty: 'Medium' },
    { no: 13, title: 'Daily Temperatures', difficulty: 'Medium' },
    { no: 14, title: 'Score of Parentheses', difficulty: 'Medium' },
    { no: 15, title: 'Online Stock Span', difficulty: 'Medium' },
    { no: 16, title: 'Asteroid Collision', difficulty: 'Medium' },
    { no: 17, title: 'Expression Evaluation', difficulty: 'Medium' },
    { no: 18, title: 'Maximal Rectangle', difficulty: 'Hard' },
    { no: 19, title: 'Reverse Substrings Between Each Pair of Parentheses', difficulty: 'Medium' },
    { no: 20, title: 'Binary Search Tree Iterator', difficulty: 'Medium' }
];

const queueDsaProblems = [
    { no: 1, title: 'Implement Queue Using Stacks', difficulty: 'Easy' },
    { no: 2, title: 'Sliding Window Maximum', difficulty: 'Hard' },
    { no: 3, title: 'Design Circular Queue', difficulty: 'Medium' },
    { no: 4, title: 'Design Hit Counter', difficulty: 'Medium' },
    { no: 5, title: 'First Unique Character in a String', difficulty: 'Easy' },
    { no: 6, title: 'Perfect Squares', difficulty: 'Medium' },
    { no: 7, title: 'Course Schedule (BFS)', difficulty: 'Medium' },
    { no: 8, title: 'Binary Tree Level Order Traversal', difficulty: 'Medium' },
    { no: 9, title: 'Rotting Oranges', difficulty: 'Medium' },
    { no: 10, title: 'Number of Islands (BFS)', difficulty: 'Medium' },
    { no: 11, title: 'Walls and Gates', difficulty: 'Medium' },
    { no: 12, title: 'Ladder Length (Word Ladder)', difficulty: 'Hard' },
    { no: 13, title: 'Shortest Path in Binary Matrix', difficulty: 'Medium' },
    { no: 14, title: 'Jump Game II', difficulty: 'Medium' },
    { no: 15, title: 'Shortest Bridge', difficulty: 'Medium' },
    { no: 16, title: 'Knight Probability in Chessboard', difficulty: 'Medium' },
    { no: 17, title: 'Snake and Ladder Problem', difficulty: 'Medium' },
    { no: 18, title: 'Task Scheduler', difficulty: 'Medium' },
    { no: 19, title: 'Time Needed to Inform All Employees', difficulty: 'Medium' },
    { no: 20, title: 'Max Area of Island', difficulty: 'Medium' }
  ];
  
const treeDsaProblems = [
    { no: 1, title: 'Maximum Depth of Binary Tree', difficulty: 'Easy' },
    { no: 2, title: 'Binary Tree Level Order Traversal', difficulty: 'Medium' },
    { no: 3, title: 'Invert Binary Tree', difficulty: 'Easy' },
    { no: 4, title: 'Diameter of Binary Tree', difficulty: 'Easy' },
    { no: 5, title: 'Balanced Binary Tree', difficulty: 'Easy' },
    { no: 6, title: 'Symmetric Tree', difficulty: 'Easy' },
    { no: 7, title: 'Path Sum', difficulty: 'Easy' },
    { no: 8, title: 'Lowest Common Ancestor of a Binary Tree', difficulty: 'Medium' },
    { no: 9, title: 'Binary Tree Right Side View', difficulty: 'Medium' },
    { no: 10, title: 'Binary Tree Zigzag Level Order Traversal', difficulty: 'Medium' },
    { no: 11, title: 'Serialize and Deserialize Binary Tree', difficulty: 'Hard' },
    { no: 12, title: 'Validate Binary Search Tree', difficulty: 'Medium' },
    { no: 13, title: 'Kth Smallest Element in a BST', difficulty: 'Medium' },
    { no: 14, title: 'Construct Binary Tree from Preorder and Inorder Traversal', difficulty: 'Medium' },
    { no: 15, title: 'Flatten Binary Tree to Linked List', difficulty: 'Medium' },
    { no: 16, title: 'Populating Next Right Pointers in Each Node', difficulty: 'Medium' },
    { no: 17, title: 'Binary Tree Maximum Path Sum', difficulty: 'Hard' },
    { no: 18, title: 'Recover Binary Search Tree', difficulty: 'Medium' },
    { no: 19, title: 'Count Complete Tree Nodes', difficulty: 'Medium' },
    { no: 20, title: 'Sum Root to Leaf Numbers', difficulty: 'Medium' }
];

const
   

export {allDsaProblems, arrayDsaProblems, linkedListDsaProblems, stackDsaProblems, queueDsaProblems, treeDsaProblems};
